//DESCRIPTION:Copies the current document to a backup-location before savingvar doc = app.activeDocument;var current_path = app.activeDocument.filePath.fsName.toString(); var path = app.activeDocument.filePath;var backup_path = current_path+"/z_old";var myDialog = app.dialogs.add({name:"Back up and Save a new Version",canCancel:true});var oldFile= doc.fullName;var myFileName = doc.name;var oldPath = path.fsName + "/" + oldFile;//If the file name contains the extension ".indd", remove itif(myFileName.indexOf(".indd")!=-1){	var myRegularExpression = /.indd/gi	myFileName = myFileName.replace(myRegularExpression, "");}var now = new Date();var datestamp = two_digit(now.getMonth()+1) +  two_digit(now.getDate()) + now.getFullYear().toString().substr(2,2);myFileName = checkForDate(myFileName, datestamp)function checkForDate(fileName){	var str = "";	var pos = fileName.indexOf("_");	if (pos == -1 || pos != 6) {		str = datestamp + "_" + fileName;	}	else {				var enteredDate = fileName.substr(0, pos);			if (enteredDate == datestamp) {			str = fileName;//.substr(0, pos);		}		else{			str = datestamp + fileName.slice(pos); 		}	}	return str;};with(myDialog){//Add a dialog column.with(dialogColumns.add()){//Create a text edit field.var myTextEditField = textEditboxes.add({editContents:myFileName, minWidth:180});	}}//Display the dialog box.var myResult = myDialog.show();if(myResult == true){//Get the values from the dialog box controls.var myNewFileName = myTextEditField.editContents;//Remove the dialog box from memory.myDialog.destroy();backUp(myNewFileName);}else{	myDialog.destroy();}function backUp(myNewFileName, oldFile) {	var doc = app.activeDocument;	try {		if (doc.saved == true) {			var doc_file = doc.fullName;			var doc_name = doc.name;			//var now = new Date();			//var datestamp = two_digit(now.getMonth()+1) +  two_digit(now.getDate()) + now.getFullYear().toString().substr(2,2);			//var timestamp =  two_digit(now.getHours()) + two_digit(now.getMinutes()) + two_digit(now.getSeconds());			var target_folder = Folder(backup_path);			if (target_folder.exists == false ) {target_folder.create(); }			//var target_file = target_folder.toString() + "/" + doc_name;			MoveFile(oldFile, target_folder);						// if (doc_file.copy(target_file) == false) {			// 	alert("Backup error\rCould not create backup copy.");			// }				}	} catch (e) {		alert(e);	}	doc.save(); 	saveNew(myNewFileName, current_path);}function saveNew(myNewFileName, current_path){	app.activeDocument.save(new File(current_path + "/" + myNewFileName + ".indd"));	//sourceFile.copy();	//oldFile.remove();	//backup(oldFile);};function two_digit(n) {	if (n < 10) {		return "0" + n.toString();	} else {		return n.toString();	}}function MoveFile(myFile, myFolder) {				alert(oldFile.fsName);    if (!oldFile instanceof File || !myFolder instanceof Folder || !oldFile.exists || !myFolder.exists) return false;    var myMovedFile = new File(myFolder.absoluteURI + "/" + oldFile.name);    if (myMovedFile.exists) return false;    if (File.fs == "Windows")  {        var myVbScript = 'Set fs = CreateObject("Scripting.FileSystemObject")\r';        myVbScript +=  'fs.MoveFile "' + oldFile.fsName + '", "' + myFolder.fsName + '\\"';        app.doScript(myVbScript, ScriptLanguage.visualBasic);    }    else if (File.fs == "Macintosh") {        var myAppleScript =         'tell application "Finder"\r' +        'move POSIX file "' + oldFile.fsName + '"  to POSIX file "' + myFolder.fsName + '" with replacing\r' +        'end tell\r'        app.doScript(myAppleScript, ScriptLanguage.applescriptLanguage);    }    if (myMovedFile.exists) {        return true;    }    else {        return false;    }}